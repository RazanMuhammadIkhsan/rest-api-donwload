const axios = require("axios");
const cheerio = require("cheerio");
const FormDatas = require("form-data");

const anime = {
  animeIndo: async (type, opt) => {
    if (type === "latest") {
      const { data } = await axios.get("https://anime-indo.lol/");
      const $ = cheerio.load(data);

      const result = [];

      $("div.menu a").each((_, el) => {
        const element = $(el);
        const img = element.find("img.lazy").attr("data-original");
        const title = element.find("p").text().trim();
        const episode = element.find("span.eps").text().trim();
        const link = "https://anime-indo.lol" + element.attr("href");

        if (!title || !episode || !img) return;

        result.push({
          title,
          episode,
          img,
          link,
        });
      });

      return result;
    } else if (type === "search") {
      const query = opt?.query;
      if (!query) return { error: "Query kosong. Masukkan `query`." };

      const formattedQuery = query.replace(/\s+/g, "-").toLowerCase();
      const { data: Search } = await axios.get(
        `https://anime-indo.lol/search/${formattedQuery}/`,
      );
      const $$ = cheerio.load(Search);

      const results = [];

      $$(".menu table.otable").each((_, el) => {
        const element = $$(el);
        const linkPart = element.find("td.vithumb a").attr("href");
        const link = "https://anime-indo.lol" + linkPart;
        const img =
          "https://anime-indo.lol" + element.find("td.vithumb img").attr("src");
        const title = element.find("td.videsc a").first().text().trim();
        const description = element.find("td.videsc p.des").text().trim();

        results.push({
          title,
          img,
          link,
          description,
        });
      });

      return results;
    }

    return {
      msg: "Type Tidak Di Kenali!",
      availableType: "latest, search",
      availableOptions: {
        query: "Pakai Jika Type Anda Adalah Search",
      },
    };
  },
  quotes: async () => {
    let { data } = await axios.get(`https://otakotaku.com/quote/feed`);
    let $ = cheerio.load(data);

    let quotes = [];

    $(".kotodama-list").each((i, el) => {
      let character = $(el).find(".char-name").text().trim();
      let anime = $(el).find(".anime-title").text().trim();
      let episode = $(el).find(".meta").text().trim();
      let quote = $(el).find(".quote").text().trim();
      let image = $(el).find(".char-img img").attr("data-src");
      let link = $(el).find("a.kuroi").attr("href");

      quotes.push({
        character,
        anime,
        episode,
        quote,
        image,
        link: `https://otakotaku.com${link}`,
      });
    });

    return quotes.length > 0
      ? quotes[Math.floor(Math.random() * quotes.length)]
      : null;
  },
  anime9Search: async (anime) => {
    const { data: dataa } = await axios.get(
      `https://9animetv.to/search?keyword=${anime}`,
    );

    const $ = cheerio.load(dataa);

    const result = [];

    $(".flw-item").each((i, element) => {
      const title = $(element).find(".film-name a").attr("title");
      const url =
        "https://9animetv.to" + $(element).find(".film-name a").attr("href");
      const imgSrc = $(element).find(".film-poster-img").attr("data-src");
      const quality = $(element).find(".tick-quality").text();
      const subOrDub =
        $(element).find(".tick-sub").text() ||
        $(element).find(".tick-dub").text();
      const episode = $(element)
        .find(".tick-eps")
        .text()
        .replace(/\s+/g, " ")
        .trim();

      result.push({
        title,
        url,
        imgSrc,
        quality,
        subOrDub,
        episode,
      });
    });

    return result;
  },
  anime9Details: async (url) => {
    try {
      let { data } = await axios.get(url);
      let $ = cheerio.load(data);

      let title = $(".film-name").text().trim();
      let image = $(".film-poster img").attr("src");
      let alias = $(".alias").text().trim();
      let description = $(".film-description p").text().trim();
      let type = $(".item-title:contains('Type:')").next().text().trim();
      let studio = $(".item-title:contains('Studios:')").next().text().trim();
      let aired = $(".item-title:contains('Date aired:')").next().text().trim();
      let status = $(".item-title:contains('Status:')").next().text().trim();
      let score = $(".item-title:contains('Scores:')").next().text().trim();
      let duration = $(".item-title:contains('Duration:')")
        .next()
        .text()
        .trim();
      let quality = $(".item-title:contains('Quality:')").next().text().trim();
      let views = $(".item-title:contains('Views:')").next().text().trim();

      let genres = [];
      $(".item-title:contains('Genre:')")
        .next()
        .find("a")
        .each((_, el) => genres.push($(el).text().trim()));

      return {
        title,
        image,
        alias,
        description,
        type,
        studio,
        aired,
        status,
        score,
        duration,
        quality,
        views,
        genres,
      };
    } catch (error) {
      console.error("Error fetching details:", error);
      return null;
    }
  },
  ikoapp: {
    daftarAnime: async () => {
      const { data } = await axios.get("https://ikoapp.com/daftar_anime");
      const $ = cheerio.load(data);
      const hasil = [];

      $(".grid > div").each((i, el) => {
        const element = $(el);

        const link = element.find("a").attr("href")?.trim();
        const thumb = element.find("img").attr("src")?.trim();
        const title = element.find("h3").text().trim();
        const episode = element.find("span").first().text().trim();
        const type = element.find("span").last().text().trim();

        hasil.push({
          title,
          link: "https://ikoapp.com" + link,
          thumbnail: "https://ikoapp.com" + thumb,
          episode,
          type,
        });
      });

      return hasil;
    },
    search: async (animeh) => {
      if (!animeh) return "Masukkan Nama Anime";

      const formData = new FormDatas();
      formData.append("q", animeh);
      formData.append("type", "");
      formData.append("genre", "");
      formData.append("status", "");
      formData.append("sort", "");

      const headers = {
        headers: {
          ...formData.getHeaders(),
        },
      };

      const { data } = await axios.post(
        "https://ikoapp.com/anime/filter",
        formData,
        headers,
      );

      const $ = cheerio.load(data);
      const results = [];

      $(".grid > div").each((_, el) => {
        const $el = $(el);
        const link = $el.find("a").attr("href");
        const title = $el.find("h3").text().trim();
        const image = $el.find("img").attr("src");
        const episode = $el.find("span").eq(0).text().trim();
        const type = $el.find("span").eq(1).text().trim();

        results.push({
          title,
          link: "https://ikoapp.com" + link,
          image: image.startsWith("http")
            ? image
            : "https://ikoapp.com" + image,
          episode,
          type,
        });
      });

      return results;
    },
    sedangTayang: async () => {
      const { data } = await axios.get("https://ikoapp.com/");
      const $ = cheerio.load(data);
      const hasil = [];

      $("#sedang-tayang .card-anime").each((i, el) => {
        const $el = $(el);
        const title = $el.find("h5.title").text().trim();
        const image = "https://ikoapp.com" + $el.find("img").attr("src");
        const type = $el.find(".badge-type").text().trim();
        const episode = $el.find(".episode").text().trim();
        const views = $el.find(".views").text().trim();
        const link =
          "https://ikoapp.com" + $el.find("a.play-icon").attr("href");

        hasil.push({
          title,
          image,
          type,
          episode,
          views,
          link,
        });
      });

      return hasil;
    },
    animeAdd: async () => {
      try {
        const { data } = await axios.get("https://ikoapp.com");
        const $ = cheerio.load(data);
        const result = [];

        $("#baru-ditambahkan .col-6.col-md-4.col-lg-3").each((_, el) => {
          const element = $(el);
          const image = element.find("img").attr("src");
          const title = element.find("h5.title").text().trim();
          const type = element.find(".badge-type").text().trim();
          const status = element.find(".status").text().trim();
          const link = element.find("a.play-icon").attr("href");

          result.push({
            title,
            image: image?.startsWith("/")
              ? `https://ikoapp.com${image}`
              : image,
            type,
            status,
            link: link?.startsWith("/") ? `https://ikoapp.com${link}` : link,
          });
        });

        return result;
      } catch (err) {
        console.error("Gagal mengambil data:", err.message);
      }
    },
    recommended: async () => {
      const { data } = await axios.get("https://ikoapp.com/recommendations");
      const $ = cheerio.load(data);

      const results = [];

      $("main .grid > a").each((_, el) => {
        const $el = $(el);

        const title = $el.find("h2").text().trim();
        const href = $el.attr("href")?.trim();
        const image = $el.find("img").attr("src")?.trim();
        const year = $el.find(".fa-calendar-alt").parent().text().trim();
        const descShort = $el.find("p.italic").text().trim();
        const descFull = $el.find("p.text-gray-400").text().trim();

        const genres = [];
        $el.find(".flex.flex-wrap.gap-2 span").each((_, span) => {
          genres.push($(span).text().trim());
        });

        const rating = $el.find(".fa-star").parent().text().trim();
        const status = $el.find(".fa-check-circle").parent().text().trim();
        const views = $el.find(".fa-users").parent().text().trim();

        results.push({
          title,
          link: "https://ikoapp.com" + href,
          image: "https://ikoapp.com" + image,
          year,
          descShort,
          descFull,
          genres,
          rating,
          status,
          views,
        });
      });

      return results;
    },
  },
  kusonime: {
    search: async (query) => {
      const { data } = await axios.get(
        `https://kusonime.com/?s=${encodeURIComponent(query)}&post_type=post`,
        {
          headers: {
            "User-Agent":
              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
            Accept:
              "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "Accept-Language": "id,en-US;q=0.9,en;q=0.8",
            Referer: "https://kusonime.com/",
            DNT: "1",
            Connection: "keep-alive",
            "Upgrade-Insecure-Requests": "1",
          },
        },
      );

      const $ = cheerio.load(data);
      const results = [];

      $(".kover").each((_, el) => {
        const title = $(el).find("h2.episodeye a").attr("title")?.trim();
        const link = $(el).find("h2.episodeye a").attr("href");
        const image = $(el).find(".thumbz img").attr("src");
        const posted = $(el)
          .find("p:contains('Posted by')")
          .text()
          .replace("Posted by", "")
          .trim();
        const released = $(el)
          .find("p:contains('Released on')")
          .text()
          .replace("Released on", "")
          .trim();

        const genres = [];
        $(el)
          .find("p:contains('Genre') a")
          .each((_, g) => {
            genres.push($(g).text().trim());
          });

        if (title && link) {
          results.push({ title, link, image, posted, released, genres });
        }
      });

      return new Success(results);
    },
    detail: async (url) => {
      const { data } = await axios.get(url, {
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
          Accept:
            "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
          "Accept-Language": "id,en-US;q=0.9,en;q=0.8",
          Referer: "https://kusonime.com/",
          DNT: "1",
          Connection: "keep-alive",
          "Upgrade-Insecure-Requests": "1",
        },
      });

      const $ = cheerio.load(data);

      const title = $(".post-thumb h1.jdlz").text().trim();
      const thumbnail = $(".post-thumb img").attr("src");
      const posted = $(".kategoz").text().trim();
      const info = {};
      const genres = [];

      $(".info p").each((_, el) => {
        const label = $(el).find("b").text().replace(":", "").trim();
        const value = $(el)
          .clone()
          .children()
          .remove()
          .end()
          .text()
          .replace(label, "")
          .trim();

        if (label.toLowerCase().includes("genre")) {
          $(el)
            .find("a")
            .each((_, a) => genres.push($(a).text().trim()));
        } else {
          info[label] = value;
        }
      });

      const synopsis = $(".lexot > p").first().text().trim();
      const downloads = [];

      $(".smokeurlrh").each((_, el) => {
        const quality = $(el).find("strong").text().trim();
        const links = [];

        $(el)
          .find("a")
          .each((_, a) => {
            links.push({
              server: $(a).text().trim(),
              url: $(a).attr("href"),
            });
          });

        downloads.push({ quality, links });
      });

      return {
        title,
        thumbnail,
        posted,
        info,
        genres,
        synopsis,
        downloads,
      };
    },
    genre: async (genres) => {
      const { data } = await axios.get(
        `https://kusonime.com/genres/${genres}/`,
        {
          headers: {
            "User-Agent":
              "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
            Accept:
              "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "Accept-Language": "id,en-US;q=0.9,en;q=0.8",
            Referer: "https://kusonime.com/",
            DNT: "1",
            Connection: "keep-alive",
            "Upgrade-Insecure-Requests": "1",
          },
        },
      );

      const $ = cheerio.load(data);
      const results = [];

      $(".kover").each((_, el) => {
        const title = $(el).find("h2.episodeye a").attr("title")?.trim();
        const link = $(el).find("h2.episodeye a").attr("href");
        const image = $(el).find(".thumbz img").attr("src");
        const released = $(el)
          .find("p:contains('Released on')")
          .text()
          .replace("Released on", "")
          .trim();

        const genreList = [];
        $(el)
          .find("p:contains('Genre') a")
          .each((_, g) => {
            genreList.push($(g).text().trim());
          });

        if (title && link) {
          results.push({ title, link, image, released, genres: genreList });
        }
      });

      return results;
    },
  },
};

module.exports = anime;
