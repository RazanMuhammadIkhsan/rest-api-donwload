const axios = require("axios");
const cheerio = require("cheerio");
const { Success, ErrorResponse } = require("./lib/function.cjs");

const search = {
  nasa: async (q) => {
    const { data } = await axios.get(
      `https://www.nasa.gov/?search=${encodeURIComponent(q)}`,
    );
    const $ = cheerio.load(data);

    const results = [];

    $(".hds-search-result-content").each((i, el) => {
      const title = $(el).find("h4.hds-search-result-heading").text().trim();
      const url = $(el).siblings("em.hds-search-result-url").text().trim(); // ini fallback
      const urlFromAnchor = $(el).closest("a").attr("href"); // ambil dari <a>
      const excerpt = $(el).find("p.hds-search-result-excerpt").text().trim();
      const readTime = $(el).find(".label").text().trim();

      results.push({
        success: true,
        result: {
          title,
          url: urlFromAnchor || url,
          excerpt,
          readTime,
        },
      });
    });

    return {
      success: true,
      result: results,
    };
  },
  snackvideo: async (query) => {
    const validQuery = query.replace(" ", "-");
    const urlEncoded = `https://snackvideo.com/discover/${encodeURIComponent(validQuery)}`;
    const payload = {
      ai_content: false,
      count: 0,
      fromUser: false,
      mobile: true,
      need_id_json: false,
      need_tdk: false,
      pcursor: "0",
      request_source: 1102,
      searchWord: validQuery,
      seoDefaultFilterV2: true,
      url: urlEncoded,
    };
    const { data } = await axios.post(
      "https://www.snackvideo.com/rest/o/w/pwa/discover",
      payload,
    );
    return {
      success: true,
      resultSearch: data.feeds,
    };
  },
  spotify: async (qu) => {
    const { data } = await axios.post(
      `https://spotifydown.app/api/metadata?link=${qu}`,
    );
    return {
      success: true,
      response: data.data.tracks,
    };
  },
  bstation: async (query) => {
    try {
      let { data: m } = await axios.get(
        `https://www.bilibili.tv/id/search-result?q=${encodeURIComponent(query)}`,
      );
      let $ = cheerio.load(m);

      const results = [];
      $("li.section__list__item").each((index, element) => {
        const title = $(element)
          .find(".highlights__text--active")
          .text()
          .trim();
        const videoLink = $(element)
          .find(".bstar-video-card__cover-link")
          .attr("href");
        const thumbnail = $(element)
          .find(".bstar-video-card__cover-img source")
          .attr("srcset");
        const views = $(element)
          .find(".bstar-video-card__desc--normal")
          .text()
          .trim();
        const creatorName = $(element)
          .find(".bstar-video-card__nickname")
          .text()
          .trim();
        const creatorLink = $(element)
          .find(".bstar-video-card__nickname")
          .attr("href");
        const duration = $(element)
          .find(".bstar-video-card__cover-mask-text")
          .text()
          .trim();

        results.push({
          title,
          videoLink: `https://www.bilibili.tv${videoLink}`,
          thumbnail,
          views,
          creatorName,
          creatorLink: `https://www.bilibili.tv${creatorLink}`,
          duration,
        });
      });

      return results;
    } catch (error) {
      console.error("Error while fetching search results:", error);
    }
  },
  songFinderByLyrics: async (lyrics) => {
    function convertMilliseconds(ms) {
      const totalSeconds = Math.floor(ms / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;

      return `${minutes} menit ${seconds} detik`;
    }
    const { data } = await axios.get(
      `https://find-song-by-lyrics-search.netlify.app/.netlify/functions/spotify-api/search?q=${encodeURIComponent(lyrics)}`,
    );
    let ress = data.tracks.items.map((i) => ({
      isAlbum: i.album.album_type === "album",
      songName: i.name,
      duration: convertMilliseconds(i.duration_ms),
      artists: i.artists?.[0]?.name || "Unknown Artists",
      albums: i.album?.name || "No Album Detected",
      release_date: i.album?.release_date || "Unknown Released Date",
      spotify_url: i.external_urls?.spotify || undefined,
      artists_url: i.artists?.[0].external_urls?.spotify || undefined,
      lyrics_snippet: i?.matchedLyrics || undefined,
      image: i.album?.images?.[0]?.url || undefined,
    }));
    return new Success(ress);
  },
};

module.exports = search;
